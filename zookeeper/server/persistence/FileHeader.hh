// File generated by hadoop record compiler. Do not edit.

#ifndef FileHeader_HH_
#define FileHeader_HH_

#include "Efc.hh"
#include "../../../jute/inc/ERecord.hh"
#include "../../../jute/inc/EBinaryInputArchive.hh"
#include "../../../jute/inc/EBinaryOutputArchive.hh"
#include "../../../jute/inc/ECsvOutputArchive.hh"

namespace efc {
namespace ezk {

class FileHeader: public ERecord {
public:
	int magic;
	int version;
	llong dbid;

	FileHeader() {
	}
	FileHeader(int magic, int version, llong dbid) {
		this->magic = magic;
		this->version = version;
		this->dbid = dbid;
	}
	int getMagic() {
		return magic;
	}
	void setMagic(int m_) {
		magic = m_;
	}
	int getVersion() {
		return version;
	}
	void setVersion(int m_) {
		version = m_;
	}
	llong getDbid() {
		return dbid;
	}
	void setDbid(llong m_) {
		dbid = m_;
	}
	virtual void serialize(EOutputArchive* a_, const char* tag)
			THROWS(EIOException) {
		a_->startRecord(this, tag);
		a_->writeInt(magic, "magic");
		a_->writeInt(version, "version");
		a_->writeLLong(dbid, "dbid");
		a_->endRecord(this, tag);
	}
	virtual void deserialize(EInputArchive* a_, const char* tag)
			THROWS(EIOException) {
		a_->startRecord(tag);
		magic = a_->readInt("magic");
		version = a_->readInt("version");
		dbid = a_->readLLong("dbid");
		a_->endRecord(tag);
	}
	virtual EString toString() {
		try {
			EByteArrayOutputStream s;
			ECsvOutputArchive a_(&s);
			a_.startRecord(this, "");
			a_.writeInt(magic, "magic");
			a_.writeInt(version, "version");
			a_.writeLLong(dbid, "dbid");
			a_.endRecord(this, "");
			s.write('\0');
			return (char*) s.data();
		} catch (EThrowable& ex) {
			ex.printStackTrace();
		}
		return "ERROR";
	}
	void write(EDataOutput* out) THROWS(EIOException) {
		EBinaryOutputArchive archive(out);
		serialize(&archive, "");
	}
	void readFields(EDataInput* in) THROWS(EIOException) {
		EBinaryInputArchive archive(in);
		deserialize(&archive, "");
	}
	virtual int compareTo(EObject* peer_) THROWS(EClassCastException) {
		FileHeader* peer = dynamic_cast<FileHeader*>(peer_);
		if (!peer) {
			throw EClassCastException(__FILE__, __LINE__,
					"Comparing different types of records.");
		}
		int ret = 0;
		ret = (magic == peer->magic) ? 0 : ((magic < peer->magic) ? -1 : 1);
		if (ret != 0)
			return ret;
		ret = (version == peer->version) ?
				0 : ((version < peer->version) ? -1 : 1);
		if (ret != 0)
			return ret;
		ret = (dbid == peer->dbid) ? 0 : ((dbid < peer->dbid) ? -1 : 1);
		if (ret != 0)
			return ret;
		return ret;
	}
	virtual boolean equals(EObject* peer_) {
		FileHeader* peer = dynamic_cast<FileHeader*>(peer_);
		if (!peer) {
			return false;
		}
		if (peer_ == this) {
			return true;
		}
		boolean ret = false;
		ret = (magic == peer->magic);
		if (!ret)
			return ret;
		ret = (version == peer->version);
		if (!ret)
			return ret;
		ret = (dbid == peer->dbid);
		if (!ret)
			return ret;
		return ret;
	}
	virtual int hashCode() {
		int result = 17;
		int ret;
		ret = (int) magic;
		result = 37 * result + ret;
		ret = (int) version;
		result = 37 * result + ret;
		ret = (int) (dbid ^ (((ullong) dbid) >> 32));
		result = 37 * result + ret;
		return result;
	}
	static EString signature() {
		return "LFileHeader(iil)";
	}
};

} /* namespace ezk */
} /* namespace efc */
#endif /* FileHeader_HH_ */
