// File generated by hadoop record compiler. Do not edit.

#ifndef GetDataResponse_HH_
#define GetDataResponse_HH_

#include "Efc.hh"
#include "../../jute/inc/ERecord.hh"
#include "../../jute/inc/EBinaryInputArchive.hh"
#include "../../jute/inc/EBinaryOutputArchive.hh"
#include "../../jute/inc/ECsvOutputArchive.hh"
#include "../data/Stat.hh"

namespace efc {
namespace ezk {

class GetDataResponse: public ERecord {
public:
	sp<EA<byte> > data;
	sp<Stat> stat;

	GetDataResponse() {
	}
	GetDataResponse(sp<EA<byte> > data, sp<Stat> stat) {
		this->data = data;
		this->stat = stat;
	}
	sp<EA<byte> > getData() {
		return data;
	}
	void setData(sp<EA<byte> > m_) {
		data = m_;
	}
	sp<Stat> getStat() {
		return stat;
	}
	void setStat(sp<Stat> m_) {
		stat = m_;
	}
	virtual void serialize(EOutputArchive* a_, const char* tag)
			THROWS(EIOException) {
		a_->startRecord(this, tag);
		a_->writeBuffer(data.get(), "data");
		a_->writeRecord(stat.get(), "stat");
		a_->endRecord(this, tag);
	}
	virtual void deserialize(EInputArchive* a_, const char* tag)
			THROWS(EIOException) {
		a_->startRecord(tag);
		data = a_->readBuffer("data");
		stat = new Stat();
		a_->readRecord(stat.get(), "stat");
		a_->endRecord(tag);
	}
	virtual EString toString() {
		try {
			EByteArrayOutputStream s;
			ECsvOutputArchive a_(&s);
			a_.startRecord(this, "");
			a_.writeBuffer(data.get(), "data");
			a_.writeRecord(stat.get(), "stat");
			a_.endRecord(this, "");
			s.write('\0');
			return (char*) s.data();
		} catch (EThrowable& ex) {
			ex.printStackTrace();
		}
		return "ERROR";
	}
	void write(EDataOutput* out) THROWS(EIOException) {
		EBinaryOutputArchive archive(out);
		serialize(&archive, "");
	}
	void readFields(EDataInput* in) THROWS(EIOException) {
		EBinaryInputArchive archive(in);
		deserialize(&archive, "");
	}
	virtual int compareTo(EObject* peer_) THROWS(EClassCastException) {
		GetDataResponse* peer = dynamic_cast<GetDataResponse*>(peer_);
		if (!peer) {
			return false;
		}
		if (peer_ == this) {
			return true;
		}
		int ret = 0;
		{
			sp<EA<byte> > my = data;
			sp<EA<byte> > ur = peer->data;
			ret = compareBytes(my.get(), 0, my->length(), ur.get(), 0,
					ur->length());
		}
		if (ret != 0)
			return ret;
		ret = stat->compareTo(peer->stat.get());
		if (ret != 0)
			return ret;
		return ret;
	}
	virtual boolean equals(EObject* peer_) {
		GetDataResponse* peer = dynamic_cast<GetDataResponse*>(peer_);
		if (!peer) {
			return false;
		}
		if (peer_ == this) {
			return true;
		}
		boolean ret = false;
		ret = bufEquals(data.get(), peer->data.get());
		if (!ret)
			return ret;
		ret = stat->equals(peer->stat.get());
		if (!ret)
			return ret;
		return ret;
	}
	virtual int hashCode() {
		int result = 17;
		int ret;
		ret = EArrays::toString(data.get()).hashCode();
		result = 37 * result + ret;
		ret = stat.hashCode();
		result = 37 * result + ret;
		return result;
	}
	static EString signature() {
		return "LGetDataResponse(BLStat(lllliiiliil))";
	}
};

} /* namespace ezk */
} /* namespace efc */
#endif /* GetDataResponse_HH_ */
