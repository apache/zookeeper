// File generated by hadoop record compiler. Do not edit.

#ifndef SetWatches_HH_
#define SetWatches_HH_

#include "Efc.hh"
#include "../../jute/inc/ERecord.hh"
#include "../../jute/inc/EBinaryInputArchive.hh"
#include "../../jute/inc/EBinaryOutputArchive.hh"
#include "../../jute/inc/ECsvOutputArchive.hh"
#include "../data/Stat.hh"

namespace efc {
namespace ezk {

class SetWatches: public ERecord {
public:
	llong relativeZxid;
	sp<EList<EString*> > dataWatches; //String
	sp<EList<EString*> > existWatches; //String
	sp<EList<EString*> > childWatches; //String

	SetWatches() {
	}
	SetWatches(llong relativeZxid, sp<EList<EString*> > dataWatches,
			sp<EList<EString*> > existWatches,
			sp<EList<EString*> > childWatches) {
		this->relativeZxid = relativeZxid;
		this->dataWatches = dataWatches;
		this->existWatches = existWatches;
		this->childWatches = childWatches;
	}
	llong getRelativeZxid() {
		return relativeZxid;
	}
	void setRelativeZxid(llong m_) {
		relativeZxid = m_;
	}
	sp<EList<EString*> > getDataWatches() {
		return dataWatches;
	}
	void setDataWatches(sp<EList<EString*> > m_) {
		dataWatches = m_;
	}
	sp<EList<EString*> > getExistWatches() {
		return existWatches;
	}
	void setExistWatches(sp<EList<EString*> > m_) {
		existWatches = m_;
	}
	sp<EList<EString*> > getChildWatches() {
		return childWatches;
	}
	void setChildWatches(sp<EList<EString*> > m_) {
		childWatches = m_;
	}
	virtual void serialize(EOutputArchive* a_, const char* tag)
			THROWS(EIOException) {
		a_->startRecord(this, tag);
		a_->writeLLong(relativeZxid, "relativeZxid");
		{
			a_->startVector(dataWatches.get(), JUTE_SIZE(dataWatches), "dataWatches");
			if (dataWatches != null) {
				int len1 = dataWatches->size();
				for (int vidx1 = 0; vidx1 < len1; vidx1++) {
					EString* e1 = dynamic_cast<EString*>(dataWatches->getAt(
							vidx1));
					a_->writeString(e1, "e1");
				}
			}
			a_->endVector(dataWatches.get(), "dataWatches");
		}
		{
			a_->startVector(existWatches.get(), JUTE_SIZE(existWatches), "existWatches");
			if (existWatches != null) {
				int len1 = existWatches->size();
				for (int vidx1 = 0; vidx1 < len1; vidx1++) {
					EString* e1 = dynamic_cast<EString*>(existWatches->getAt(
							vidx1));
					a_->writeString(e1, "e1");
				}
			}
			a_->endVector(existWatches.get(), "existWatches");
		}
		{
			a_->startVector(childWatches.get(), JUTE_SIZE(childWatches), "childWatches");
			if (childWatches != null) {
				int len1 = childWatches->size();
				for (int vidx1 = 0; vidx1 < len1; vidx1++) {
					EString* e1 = dynamic_cast<EString*>(childWatches->getAt(
							vidx1));
					a_->writeString(e1, "e1");
				}
			}
			a_->endVector(childWatches.get(), "childWatches");
		}
		a_->endRecord(this, tag);
	}
	virtual void deserialize(EInputArchive* a_, const char* tag)
			THROWS(EIOException) {
		a_->startRecord(tag);
		relativeZxid = a_->readLLong("relativeZxid");
		{
			sp<EIndex> vidx1 = a_->startVector("dataWatches");
			if (vidx1 != null) {
				dataWatches = new EArrayList<EString*>();
				for (; !vidx1->done(); vidx1->incr()) {
					EString e1 = a_->readString("e1");
					dataWatches->add(new EString(e1));
				}
			}
			a_->endVector("dataWatches");
		}
		{
			sp<EIndex> vidx1 = a_->startVector("existWatches");
			if (vidx1 != null) {
				existWatches = new EArrayList<EString*>();
				for (; !vidx1->done(); vidx1->incr()) {
					EString e1 = a_->readString("e1");
					existWatches->add(new EString(e1));
				}
			}
			a_->endVector("existWatches");
		}
		{
			sp<EIndex> vidx1 = a_->startVector("childWatches");
			if (vidx1 != null) {
				childWatches = new EArrayList<EString*>();
				for (; !vidx1->done(); vidx1->incr()) {
					EString e1 = a_->readString("e1");
					childWatches->add(new EString(e1));
				}
			}
			a_->endVector("childWatches");
		}
		a_->endRecord(tag);
	}
	virtual EString toString() {
		try {
			EByteArrayOutputStream s;
			ECsvOutputArchive a_(&s);
			a_.startRecord(this, "");
			a_.writeLLong(relativeZxid, "relativeZxid");
			{
				a_.startVector(dataWatches.get(), JUTE_SIZE(dataWatches), "dataWatches");
				if (dataWatches != null) {
					int len1 = dataWatches->size();
					for (int vidx1 = 0; vidx1 < len1; vidx1++) {
						EString* e1 = dynamic_cast<EString*>(dataWatches->getAt(
								vidx1));
						a_.writeString(e1, "e1");
					}
				}
				a_.endVector(dataWatches.get(), "dataWatches");
			}
			{
				a_.startVector(existWatches.get(), JUTE_SIZE(existWatches), "existWatches");
				if (existWatches != null) {
					int len1 = existWatches->size();
					for (int vidx1 = 0; vidx1 < len1; vidx1++) {
						EString* e1 = dynamic_cast<EString*>(existWatches->getAt(
								vidx1));
						a_.writeString(e1, "e1");
					}
				}
				a_.endVector(existWatches.get(), "existWatches");
			}
			{
				a_.startVector(childWatches.get(), JUTE_SIZE(childWatches), "childWatches");
				if (childWatches != null) {
					int len1 = childWatches->size();
					for (int vidx1 = 0; vidx1 < len1; vidx1++) {
						EString* e1 = dynamic_cast<EString*>(childWatches->getAt(
								vidx1));
						a_.writeString(e1, "e1");
					}
				}
				a_.endVector(childWatches.get(), "childWatches");
			}
			a_.endRecord(this, "");
			s.write('\0');
			return (char*) s.data();
		} catch (EThrowable& ex) {
			ex.printStackTrace();
		}
		return "ERROR";
	}
	void write(EDataOutput* out) THROWS(EIOException) {
		EBinaryOutputArchive archive(out);
		serialize(&archive, "");
	}
	void readFields(EDataInput* in) THROWS(EIOException) {
		EBinaryInputArchive archive(in);
		deserialize(&archive, "");
	}
	virtual int compareTo(EObject* peer_) THROWS(EClassCastException) {
		throw EUnsupportedOperationException(__FILE__, __LINE__,
				"comparing SetWatches is unimplemented");
	}
	virtual boolean equals(EObject* peer_) {
		SetWatches* peer = dynamic_cast<SetWatches*>(peer_);
		if (!peer) {
			return false;
		}
		if (peer_ == this) {
			return true;
		}

		boolean ret = false;
		ret = (relativeZxid == peer->relativeZxid);
		if (!ret)
			return ret;
		ret = dataWatches->equals(peer->dataWatches.get());
		if (!ret)
			return ret;
		ret = existWatches->equals(peer->existWatches.get());
		if (!ret)
			return ret;
		ret = childWatches->equals(peer->childWatches.get());
		if (!ret)
			return ret;
		return ret;
	}
	virtual int hashCode() {
		int result = 17;
		int ret;
		ret = (int) (relativeZxid ^ (((ullong) relativeZxid) >> 32));
		result = 37 * result + ret;
		ret = dataWatches->hashCode();
		result = 37 * result + ret;
		ret = existWatches->hashCode();
		result = 37 * result + ret;
		ret = childWatches->hashCode();
		result = 37 * result + ret;
		return result;
	}
	static EString signature() {
		return "LSetWatches(l[s][s][s])";
	}
};

} /* namespace ezk */
} /* namespace efc */
#endif /* SetWatches_HH_ */
