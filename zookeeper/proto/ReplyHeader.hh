// File generated by hadoop record compiler. Do not edit.

#ifndef ReplyHeader_HH_
#define ReplyHeader_HH_

#include "Efc.hh"
#include "../../jute/inc/ERecord.hh"
#include "../../jute/inc/EBinaryInputArchive.hh"
#include "../../jute/inc/EBinaryOutputArchive.hh"
#include "../../jute/inc/ECsvOutputArchive.hh"

namespace efc {
namespace ezk {

class ReplyHeader: public ERecord {
public:
	int xid;
	llong zxid;
	int err;

	ReplyHeader() {
	}
	ReplyHeader(int xid, llong zxid, int err) {
		this->xid = xid;
		this->zxid = zxid;
		this->err = err;
	}
	int getXid() {
		return xid;
	}
	void setXid(int m_) {
		xid = m_;
	}
	llong getZxid() {
		return zxid;
	}
	void setZxid(llong m_) {
		zxid = m_;
	}
	int getErr() {
		return err;
	}
	void setErr(int m_) {
		err = m_;
	}
	virtual void serialize(EOutputArchive* a_, const char* tag)
			THROWS(EIOException) {
		a_->startRecord(this, tag);
		a_->writeInt(xid, "xid");
		a_->writeLLong(zxid, "zxid");
		a_->writeInt(err, "err");
		a_->endRecord(this, tag);
	}
	virtual void deserialize(EInputArchive* a_, const char* tag)
			THROWS(EIOException) {
		a_->startRecord(tag);
		xid = a_->readInt("xid");
		zxid = a_->readLLong("zxid");
		err = a_->readInt("err");
		a_->endRecord(tag);
	}
	virtual EString toString() {
		try {
			EByteArrayOutputStream s;
			ECsvOutputArchive a_(&s);
			a_.startRecord(this, "");
			a_.writeInt(xid, "xid");
			a_.writeLLong(zxid, "zxid");
			a_.writeInt(err, "err");
			a_.endRecord(this, "");
			s.write('\0');
			return (char*) s.data();
		} catch (EThrowable& ex) {
			ex.printStackTrace();
		}
		return "ERROR";
	}
	void write(EDataOutput* out) THROWS(EIOException) {
		EBinaryOutputArchive archive(out);
		serialize(&archive, "");
	}
	void readFields(EDataInput* in) THROWS(EIOException) {
		EBinaryInputArchive archive(in);
		deserialize(&archive, "");
	}
	virtual int compareTo(EObject* peer_) THROWS(EClassCastException) {
		ReplyHeader* peer = dynamic_cast<ReplyHeader*>(peer_);
		if (!peer) {
			throw EClassCastException(__FILE__, __LINE__,
					"Comparing different types of records.");
		}
		int ret = 0;
		ret = (xid == peer->xid) ? 0 : ((xid < peer->xid) ? -1 : 1);
		if (ret != 0)
			return ret;
		ret = (zxid == peer->zxid) ? 0 : ((zxid < peer->zxid) ? -1 : 1);
		if (ret != 0)
			return ret;
		ret = (err == peer->err) ? 0 : ((err < peer->err) ? -1 : 1);
		if (ret != 0)
			return ret;
		return ret;
	}
	virtual boolean equals(EObject* peer_) {
		ReplyHeader* peer = dynamic_cast<ReplyHeader*>(peer_);
		if (!peer) {
			return false;
		}
		if (peer_ == this) {
			return true;
		}
		boolean ret = false;
		ret = (xid == peer->xid);
		if (!ret)
			return ret;
		ret = (zxid == peer->zxid);
		if (!ret)
			return ret;
		ret = (err == peer->err);
		if (!ret)
			return ret;
		return ret;
	}
	virtual int hashCode() {
		int result = 17;
		int ret;
		ret = (int) xid;
		result = 37 * result + ret;
		ret = (int) (zxid ^ (((ullong) zxid) >> 32));
		result = 37 * result + ret;
		ret = (int) err;
		result = 37 * result + ret;
		return result;
	}
	static EString signature() {
		return "LReplyHeader(ili)";
	}
};

} /* namespace ezk */
} /* namespace efc */
#endif /* ReplyHeader_HH_ */
