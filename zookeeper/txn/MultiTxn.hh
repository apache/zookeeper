// File generated by hadoop record compiler. Do not edit.

#ifndef MultiTxn_HH_
#define MultiTxn_HH_

#include "Efc.hh"
#include "../../jute/inc/ERecord.hh"
#include "../../jute/inc/EBinaryInputArchive.hh"
#include "../../jute/inc/EBinaryOutputArchive.hh"
#include "../../jute/inc/ECsvOutputArchive.hh"
#include "./Txn.hh"

namespace efc {
namespace ezk {

class MultiTxn: public ERecord {
public:
	sp<EList<Txn*> > txns;

	MultiTxn() {
	}
	MultiTxn(sp<EList<Txn*> > txns) {
		this->txns = txns;
	}
	sp<EList<Txn*> > getTxns() {
		return txns;
	}
	void setTxns(sp<EList<Txn*> > m_) {
		txns = m_;
	}
	virtual void serialize(EOutputArchive* a_, const char* tag)
			THROWS(EIOException) {
		a_->startRecord(this, tag);
		{
			a_->startVector(txns.get(), JUTE_SIZE(txns), "txns");
			if (txns != null) {
				int len1 = txns->size();
				for (int vidx1 = 0; vidx1 < len1; vidx1++) {
					Txn* e1 = dynamic_cast<Txn*>(txns->getAt(vidx1));
					a_->writeRecord(e1, "e1");
				}
			}
			a_->endVector(txns.get(), "txns");
		}
		a_->endRecord(this, tag);
	}
	virtual void deserialize(EInputArchive* a_, const char* tag)
			THROWS(EIOException) {
		a_->startRecord(tag);
		{
			sp<EIndex> vidx1 = a_->startVector("txns");
			if (vidx1 != null) {
				txns = new EArrayList<Txn*>();
				for (; !vidx1->done(); vidx1->incr()) {
					Txn* e1 = new Txn();
					a_->readRecord(e1, "e1");
					txns->add(e1);
				}
			}
			a_->endVector("txns");
		}
		a_->endRecord(tag);
	}
	virtual EString toString() {
		try {
			EByteArrayOutputStream s;
			ECsvOutputArchive a_(&s);
			a_.startRecord(this, "");
			{
				a_.startVector(txns.get(), JUTE_SIZE(txns), "txns");
				if (txns != null) {
					int len1 = txns->size();
					for (int vidx1 = 0; vidx1 < len1; vidx1++) {
						Txn* e1 = dynamic_cast<Txn*>(txns->getAt(vidx1));
						a_.writeRecord(e1, "e1");
					}
				}
				a_.endVector(txns.get(), "txns");
			}
			a_.endRecord(this, "");
			s.write('\0');
			return (char*) s.data();
		} catch (EThrowable& ex) {
			ex.printStackTrace();
		}
		return "ERROR";
	}
	void write(EDataOutput* out) THROWS(EIOException) {
		EBinaryOutputArchive archive(out);
		serialize(&archive, "");
	}
	void readFields(EDataInput* in) THROWS(EIOException) {
		EBinaryInputArchive archive(in);
		deserialize(&archive, "");
	}
	virtual int compareTo(EObject* peer_) THROWS(EClassCastException) {
		throw EUnsupportedOperationException(__FILE__, __LINE__,
				"comparing MultiTxn is unimplemented");
	}
	virtual boolean equals(EObject* peer_) {
		MultiTxn* peer = dynamic_cast<MultiTxn*>(peer_);
		if (!peer) {
			return false;
		}
		if (peer_ == this) {
			return true;
		}
		boolean ret = false;
		ret = txns->equals(peer->txns.get());
		if (!ret)
			return ret;
		return ret;
	}
	virtual int hashCode() {
		int result = 17;
		int ret;
		ret = txns.hashCode();
		result = 37 * result + ret;
		return result;
	}
	static EString signature() {
		return "LMultiTxn([LTxn(iB)])";
	}
};

} /* namespace ezk */
} /* namespace efc */
#endif /* MultiTxn_HH_ */

